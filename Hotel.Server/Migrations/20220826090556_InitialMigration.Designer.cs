// <auto-generated />
using System;
using Hotel.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ecnl.Server.Migrations
{
    [DbContext(typeof(HotelContext))]
    [Migration("20220826090556_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Hotel.Server.Hotels.Hotel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<double>("GeoLat")
                        .HasColumnType("double precision")
                        .HasColumnName("geo_lat");

                    b.Property<double>("GeoLng")
                        .HasColumnType("double precision")
                        .HasColumnName("geo_lng");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("current_timestamp");

                    b.Property<Guid>("UserCreatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_created_id");

                    b.Property<Guid>("UserUpdatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_updated_id");

                    b.HasKey("Id")
                        .HasName("pk_hotel");

                    b.HasIndex("UserCreatedId")
                        .HasDatabaseName("ix_hotel_user_created_id");

                    b.HasIndex("UserUpdatedId")
                        .HasDatabaseName("ix_hotel_user_updated_id");

                    b.ToTable("hotel");
                });

            modelBuilder.Entity("Hotel.Server.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("activated_at");

                    b.Property<string>("ActivationCode")
                        .HasColumnType("text")
                        .HasColumnName("activation_code");

                    
                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PasswordResetCode")
                        .HasColumnType("text")
                        .HasColumnName("password_reset_code");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Email = "admin@hoteltest.hr",
                            FirstName = "Hotel",
                            LastName = "Admin",
                            Password = "AQAAAAEAACcQAAAAENLAaKQ9RTKMDD6R6isiYgPSzuk/urB/co49UGgZ4RfDTMYXZncKNBNEry2wwNM/wQ==",
                            Role = "admin"
                        });
                });

            modelBuilder.Entity("Hotel.Server.Hotels.Hotel", b =>
                {
                    b.HasOne("Hotel.Server.Users.User", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_hotel_user_user_created_id");

                    b.HasOne("Hotel.Server.Users.User", "UserUpdated")
                        .WithMany()
                        .HasForeignKey("UserUpdatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_hotel_user_user_updated_id");

                    b.Navigation("UserCreated");

                    b.Navigation("UserUpdated");
                });
#pragma warning restore 612, 618
        }
    }
}
